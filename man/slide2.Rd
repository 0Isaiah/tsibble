% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slide.R
\name{slide2}
\alias{slide2}
\alias{slide2}
\alias{slide2_dfr}
\alias{slide2_dfc}
\alias{pslide}
\alias{pslide}
\alias{pslide_dfr}
\alias{pslide_dfc}
\title{Sliding window calculation over multiple inputs simultaneously}
\usage{
slide2(.x, .y, .f, ..., .size = 1, .fill = NA)

slide2_dfr(.x, .y, .f, ..., .size = 1, .fill = NA, .id = NULL)

slide2_dfc(.x, .y, .f, ..., .size = 1, .fill = NA)

pslide(.l, .f, ..., .size = 1, .fill = NA)

pslide_dfr(.l, .f, ..., .size = 1, .fill = NA, .id = NULL)

pslide_dfc(.l, .f, ..., .size = 1, .fill = NA)
}
\arguments{
\item{.x, .y}{An atomic vector.}

\item{.f}{A function, formula, or atomic vector.

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it
is converted to an extractor function. Character vectors index by name
and numeric vectors index by position; use a list to index by position
and name at different levels. Within a list, wrap strings in \code{\link[=get-attr]{get-attr()}}
to extract named attributes. If a component is not present, the value of
\code{.default} will be returned.}

\item{...}{Additional arguments passed on to \code{.f}.}

\item{.size}{An integer for window size.}

\item{.fill}{A single value or data frame to replace \code{NA}.}

\item{.id}{If not \code{NULL} a variable with this name will be created
giving either the name or the index of the data frame.}

\item{.l}{A list of lists. The length of \code{.l} determines the
number of arguments that \code{.f} will be called with. List
names will be used if present.}
}
\description{
Rolling window with overlapping observations:
\itemize{
\item \code{slide2()} and \code{pslide()} always returns a list.
\item \code{slide2_lgl()}, \code{slide2_int()}, \code{slide2_dbl()}, \code{slide2_chr()} use the same
arguments as \code{slide2()}, but return vectors of the corresponding type.
\item \code{slide2_dfr()} \code{slide2_dfc()} return data frames using row-binding & column-binding.
}
}
\examples{
x <- 1:10
y <- 10:1
z <- x * 2
slide2_dbl(x, y, cor, .size = 3)
slide2(x, y, cor, .size = 3)
pslide_dbl(list(x, y, z), sum, .size = 3)
\dontrun{
jan <- pedestrian \%>\%
  filter(Date <= as.Date("2015-01-31")) \%>\%
  split_by(Sensor)
# returns a data frame of fitted values and residuals for each sensor,
# and then combines
my_diag <- function(...) {
  l <- list(...)
  fit <- lm(l$Count ~ l$Time)
  data.frame(fitted = fitted(fit), resid = residuals(fit))
}
diag_jan <- jan \%>\%
  purrr::map_dfr(
    ~ pslide_dfr(., my_diag, .size = 48)
  )
}
}
\seealso{
\itemize{
\item \link{slide}
\item \link{tile2} for tiling window without overlapping observations
\item \link{stretch2} for expanding more observations
}
}
\alias{slide2_lgl}
\alias{slide2_chr}
\alias{slide2_int}
\alias{slide2_dbl}
\alias{pslide_lgl}
\alias{pslide_chr}
\alias{pslide_int}
\alias{pslide_dbl}
