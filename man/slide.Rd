% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/window.R
\name{slide}
\alias{slide}
\alias{slide_if}
\alias{slide_at}
\alias{slide_dbl}
\alias{slide}
\alias{slide_dfr}
\alias{slide_dfc}
\title{Sliding window calculation}
\usage{
slide(.x, .f, ..., .size = 1, .fill = NA)

slide_if(.x, .p, .f, ..., .size = 1, .fill = NA)

slide_at(.x, .at, .f, ..., .size = 1, .fill = NA)

slide_dbl(.x, .f, ..., .size = 1, .fill = NA)

slide_dfr(.x, .f, ..., .size = 1, .fill = NA, .id = NULL)

slide_dfc(.x, .f, ..., .size = 1, .fill = NA)
}
\arguments{
\item{.x}{A list or atomic vector.}

\item{.f}{A function, formula, or atomic vector.

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it
is converted to an extractor function. Character vectors index by name
and numeric vectors index by position; use a list to index by position
and name at different levels. Within a list, wrap strings in \code{\link[=get-attr]{get-attr()}}
to extract named attributes. If a component is not present, the value of
\code{.default} will be returned.}

\item{...}{Additional arguments passed on to \code{.f}.}

\item{.size}{An integer for window size.}

\item{.fill}{A single value or data frame to replace \code{NA}.}

\item{.p}{A single predicate function, a formula describing such a
predicate function, or a logical vector of the same length as \code{.x}.
Alternatively, if the elements of \code{.x} are themselves lists of
objects, a string indicating the name of a logical element in the
inner lists. Only those elements where \code{.p} evaluates to
\code{TRUE} will be modified.}

\item{.at}{A character vector of names or a numeric vector of
positions. Only those elements corresponding to \code{.at} will be
modified.}

\item{.id}{If not \code{NULL} a variable with this name will be created
giving either the name or the index of the data frame.}
}
\description{
Rolling window with overlapping observations:
\itemize{
\item \code{slide()} returns a list
\item \code{slide_dfr()} return data frame using row-binding
}
}
\details{
The \code{slide()} function attempts to tackle more general problems using
the purrr-like syntax. For some specialist functions like \code{mean} and \code{sum},
you may like to check out for
\href{https://CRAN.R-project.org/package=RcppRoll}{RcppRoll} for faster performance.
}
\examples{
# sliding through a vector ----
x <- 1:10
slide_dbl(x, mean, .size = 3)
slide_dbl(x, mean, .size = 3, .fill = 0)
slide_lgl(x, ~ mean(.) > 1, .size = 3)

\dontrun{
# takes a little longer for cran check
# sliding a 2-day window for a data frame ----
jan <- pedestrian \%>\%
  filter(Date <= as.Date("2015-01-31")) \%>\%
  split_by(Sensor)
# returns a data frame of fitted values and residuals for each sensor,
# and then combines
diag_jan <- jan \%>\%
  purrr::map_dfr(
    ~ slide_dfr(., function(x) {
      fit <- lm(Count ~ Time, data = x)
      data.frame(fitted = fitted(fit), resid = residuals(fit))
    }, .size = 48)
  )
diag_jan[48:57, ]
# save lm models as additional columns
lm_jan <- jan \%>\%
  purrr::map(
    ~ mutate(., lm = slide(., ~ lm(Count ~ Time, data = .), .size = 48)
  ))
lm_jan[[1]][48:57, ]
}
}
\seealso{
\itemize{
\item \link{slide2}, \link{pslide}
\item \link{tile} for tiling window without overlapping observations
\item \link{stretch} for expanding more observations
}
}
\alias{slide_lgl}
\alias{slide_chr}
\alias{slide_int}
